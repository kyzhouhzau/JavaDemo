package abstract_class;

/*标题：面向对象-抽象类
 *当两个类中的方法名相同，但方法实体不同时，同样可以向上抽取。
 *abstract 修饰，抽象函数所在的类也必须表示抽象。
 * 之所以要抽象类，是因为部分内容不是抽象的。
 * 特点：
 * 1.方法只有声明没有实现时该方法为抽象方法，抽象方法必须定义在抽象类中
 * 2.抽象类不能被实例化，为什么？
 * 因为：调用抽象方法没用。
 * 3.抽象类必须有子类必须覆盖了所有抽象类的方法后，该子类才可以实例化。
 * 否则这个子类还是抽象类
 *
 * 抽象类的五个问题
 * 1.抽象类有构造函数吗？
 * 实际上一个类的构造函数既可以给本类初始化，也可以给子类初始化。
 *
 * 2.抽象类可以不定义抽象方法吗？
 * 可以的，但是很少见，目的是不让该类创建对象。
 *
 * 3.抽象关键字不可以和哪些关键字共存？
 * private 不行。因为抽象方法时要被子类覆盖的，私有化与之相违背
 * static 不行。静态方法可以不用实例化直接被调用，而抽象方法没有方法体，没意义
 * final 与abstract完全相反。
 *
 * 4.抽象类和一般方法的区别？
 * 相同点：都是用来描述事物，内部都定义成员
 * 不同：一般类描述事物的信息比较多，抽象类描述事物信息不足。
 * 一般类中不能定义抽象方法，抽象类中能定义抽象方发，和一般方法
 * 一般类可以被实例化，抽象类不能被实例化
 *
 * 5.抽象类一定是一个父类吗？
 * 是的。因为需要子类覆盖其方法后才可以对子类实例化
 *
 * */
abstract class Demo {
    abstract void show();
}

class Demo1 extends Demo {
    void show() {
        System.out.print("demo1 show");
    }
}
class Demo2 extends Demo{
    void show() {
        System.out.print("demo2 show");
    }
}

public class abstract_classdemo {
    public static void main(String[] args) {


    }

}
